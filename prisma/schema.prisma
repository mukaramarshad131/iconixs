// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  openLoopId    String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAT DateTime? 

  @@map("user")
}

model Comment {
  id      Int    @id @default(autoincrement())
  title   String
  content String   @db.Text
  createdAt DateTime @default(now())

  @@map("comment")
}

model FormAnswerGroup {
  id       Int    @id @default(autoincrement())
  userId   String
  email   String
  content String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("formAnswerGroup")
}
model Client {
  id                Int              @id @default(autoincrement())
  patientID         String           @unique
  openLoopId        String
  name              String?
  email             String           @unique
  password          String
  status            ClientStatus     @default(NEW)
  
  // One-to-Many relationship with multiple treatment cycles
  treatmentCycles   TreatmentCycle[] @relation("AllCycles")
  
  // One-to-One relationship for the currently active cycle (add @unique)
  currentCycleId    Int?    @unique
  currentCycle      TreatmentCycle?  @relation("CurrentCycle", fields: [currentCycleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAT DateTime? 
}

model TreatmentCycle {
  id           Int      @id @default(autoincrement())
  startDate    DateTime @default(now())
  endDate      DateTime?
  
  // Foreign key to the client for both all cycles and the current cycle
  clientId     Int
  client       Client   @relation("AllCycles", fields: [clientId], references: [id])

  // The opposite side of the one-to-one relation for the current cycle
  activeClient Client?  @relation("CurrentCycle")

  orders       Order[]
  followUps    FollowUpQuestionnaire[]
  status       TreatmentCycleStatus @default(ACTIVE)
}

model Order {
  id                    Int      @id @default(autoincrement())
  orderNumber           String   @unique
  orderDate             DateTime @default(now())
  shippingAddress       String
  medicationInstructions String
  pharmacy              String
  status                String
  shippedDate           DateTime?
  trackNumber           String?
  treatmentCycleId      Int
  treatmentCycle        TreatmentCycle @relation(fields: [treatmentCycleId], references: [id])

  // The opposite side of the one-to-many relation with FollowUpQuestionnaire
  followUps             FollowUpQuestionnaire[]
}

model FollowUpQuestionnaire {
  id            Int      @id @default(autoincrement())
  scheduledDate DateTime
  completed     Boolean  @default(false)
  completedAt   DateTime?
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id])
  status       FollowUpStatus @default(PENDING)
  treatmentCycleId Int
  treatmentCycle   TreatmentCycle @relation(fields: [treatmentCycleId], references: [id])
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  OVERDUE
}

enum ClientStatus {
  NEW
  INTAKE_FORM_COMPLETED
  PAID_INITIAL_CONSULT
  WAITING_FOR_LABS
  LABS_COMPLETED
  LABS_PROCESSED
  SCHEDULED_CONSULT
  CONSULT_COMPLETED
  RECEIVED_TREATMENT_PAYMENT_LINK
  PAID_TREATMENT
  FOLLOW_UP_PENDING
  FOLLOW_UP_COMPLETED
  TREATMENT_RESUMED
}

enum TreatmentCycleStatus {
  ACTIVE
  COMPLETED
  PAUSED
}
